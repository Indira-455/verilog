FULL ADDER USING 3 TO 8 DECODER:

module decoder(a,b,c,y);
  input a,b,c;
  output reg [7:0]y;
  always@(*)
    begin
      case({a,b,c})
        3'b000:y=8'b00000001;
        3'b001:y=8'b00000010;
        3'b010:y=8'b00000100;
        3'b011:y=8'b00001000;
        3'b100:y=8'b00010000;
        3'b101:y=8'b00100000;
        3'b110:y=8'b01000000;
        3'b111:y=8'b10000000;
        endcase
      end
endmodule


module full_adder(a,b,c,sum,carry);
  input a,b,c;
  output sum,carry;
  wire [7:0]w;
  decoder D1(a,b,c,w);
  or O1(sum,w[1],w[2],w[4],w[7]);
  or O2(carry,w[3],w[5],w[6],w[7]);
endmodule


TEST BENCH:

module full_adder_tb;
  reg a,b,c;
  wire sum,carry;
  full_adder FA1(.a(a),.b(b),.c(c),.sum(sum),.carry(carry));
  initial
    begin  
      $monitor("a=%b,b=%b,c=%b,sum=%b,carry=%b",a,b,c,sum,carry);
      a=0; b=0; c=0; 
      #10; a=0; b=0; c=1; 
      #10; a=0; b=1; c=0; 
      #10; a=0; b=1; c=1; 
      #10; a=1; b=0; c=0; 
      #10; a=1; b=0; c=1; 
      #10; a=1; b=1; c=0; 
      #10; a=1; b=1; c=1;
      #10;
      $finish;
    end
  initial begin
    $dumpfile("dump.vcd");
    $dumpvars(1);
    end
endmodule


OUTPUT:
# KERNEL: a=0,b=0,c=0,sum=0,carry=0
# KERNEL: a=0,b=0,c=1,sum=1,carry=0
# KERNEL: a=0,b=1,c=0,sum=1,carry=0
# KERNEL: a=0,b=1,c=1,sum=0,carry=1
# KERNEL: a=1,b=0,c=0,sum=1,carry=0
# KERNEL: a=1,b=0,c=1,sum=0,carry=1
# KERNEL: a=1,b=1,c=0,sum=0,carry=1
# KERNEL: a=1,b=1,c=1,sum=1,carry=1                                 
